{"version":3,"sources":["src/gatsby-node.ts"],"names":["SchemaConfigCacheKey","pluginOptionsSchema","args","Joi","object","buildMarkdownNodes","boolean","description","default","downloadLocalImages","downloadAllAssets","endpoint","string","required","fragmentsPath","locales","array","items","min","stages","token","typePrefix","maxImageWidth","number","createExecutor","gatsbyApi","pluginOptions","reporter","defaultStage","length","info","execute","operationName","query","variables","method","body","JSON","stringify","headers","Authorization","then","response","ok","panic","Error","statusText","json","errors","catch","error","retrieveSchema","schema","nodeInterface","getType","queryFields","getFields","possibleTypes","getPossibleTypes","singularRootFieldName","type","Object","keys","find","fieldName","pluralRootFieldName","String","name","hasLocaleField","locale","gatsbyNodeTypes","map","remoteTypeName","queries","stage","join","nodeQueryVariables","id","where","createSourcingConfig","cache","get","fragmentsDir","process","cwd","fs","existsSync","mkdirSync","addSystemFieldArguments","field","includes","variation","fragments","defaultArgumentValues","documents","customFragments","concurrency","gatsbyTypePrefix","gatsbyNodeDefs","sourceNodes","config","createImageUrl","url","maxWidth","parsed","URL","hostname","resized","pathname","console","log","onCreateNode","node","actions","createNode","createNodeId","getCache","store","isImage","mimeType","realUrl","ext","fileName","path","extname","basename","fileNode","parentNodeId","undefined","localFile","e","fields","entries","key","value","filter","forEach","decodedMarkdown","markdown","markdownNode","parent","internal","mediaType","content","contentDigest","crypto","createHash","update","digest","createSchemaCustomization","createTypes","schemaConfig","set","gatsbyNodeType"],"mappings":";;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AASA;;AACA;;AACA;;AAyBA,MAAMA,oBAAoB,GAAG,mBAA7B;;AAEO,SAASC,mBAAT,CACLC,IADK,EAES;AACd,QAAM;AAAEC,IAAAA;AAAF,MAAUD,IAAhB;AACA,SAAOC,GAAG,CAACC,MAAJ,CAAW;AAChBC,IAAAA,kBAAkB,EAAEF,GAAG,CAACG,OAAJ,GACjBC,WADiB,CAEf,8HAFe,EAIjBC,OAJiB,CAIT,KAJS,CADJ;AAMhBC,IAAAA,mBAAmB,EAAEN,GAAG,CAACG,OAAJ,GAClBC,WADkB,CAEhB,iEAFgB,EAIlBC,OAJkB,CAIV,KAJU,CANL;AAWhBE,IAAAA,iBAAiB,EAAEP,GAAG,CAACG,OAAJ,GAChBC,WADgB,CAEd,+DAFc,EAIhBC,OAJgB,CAIR,KAJQ,CAXH;AAgBhBG,IAAAA,QAAQ,EAAER,GAAG,CAACS,MAAJ,GACPL,WADO,CAEL,6JAFK,EAIPM,QAJO,EAhBM;AAqBhBC,IAAAA,aAAa,EAAEX,GAAG,CAACS,MAAJ,GACZL,WADY,CAEV,sPAFU,EAIZC,OAJY,CAIH,oBAJG,CArBC;AA0BhBO,IAAAA,OAAO,EAAEZ,GAAG,CAACa,KAAJ,GACNT,WADM,CAEJ,kLAFI,EAINU,KAJM,CAIAd,GAAG,CAACS,MAAJ,EAJA,EAKNM,GALM,CAKF,CALE,EAMNV,OANM,CAME,CAAC,IAAD,CANF,CA1BO;AAiChBW,IAAAA,MAAM,EAAEhB,GAAG,CAACa,KAAJ,GACLT,WADK,CAEH,sKAFG,EAILU,KAJK,CAICd,GAAG,CAACS,MAAJ,EAJD,EAKLM,GALK,CAKD,CALC,EAMLV,OANK,CAMG,CAAC,WAAD,CANH,CAjCQ;AAwChBY,IAAAA,KAAK,EAAEjB,GAAG,CAACS,MAAJ,GAAaL,WAAb,CACJ,uUADI,CAxCS;AA2ChBc,IAAAA,UAAU,EAAElB,GAAG,CAACS,MAAJ,GACTL,WADS,CAEP,8PAFO,EAITC,OAJS,CAIA,WAJA,CA3CI;AAgDhBc,IAAAA,aAAa,EAAEnB,GAAG,CAACoB,MAAJ,GACZhB,WADY,CACA,qCADA,EAEZC,OAFY,CAEJ,CAFI;AAhDC,GAAX,CAAP;AAoDD;;AAeD,SAASgB,cAAT,CACEC,SADF,EAEEC,aAFF,EAGkB;AAChB,QAAM;AAAEf,IAAAA,QAAF;AAAYG,IAAAA,aAAZ;AAA2BC,IAAAA,OAA3B;AAAoCI,IAAAA,MAApC;AAA4CC,IAAAA,KAA5C;AAAmDC,IAAAA;AAAnD,MACJK,aADF;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAeF,SAArB;AACA,QAAMG,YAAY,GAAGT,MAAM,IAAIA,MAAM,CAACU,MAAP,KAAkB,CAA5B,IAAiCV,MAAM,CAAC,CAAD,CAA5D;;AACA,MAAIS,YAAJ,EAAkB;AAChBD,IAAAA,QAAQ,CAACG,IAAT,CAAe,iCAAgCF,YAAa,EAA5D;AACD,GAFD,MAEO;AACLD,IAAAA,QAAQ,CAACG,IAAT,CAAe,+BAAf;AACD;;AACD,QAAMC,OAAO,GAAG,OAAO;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA,SAAS,GAAG;AAApC,GAAP,KAAoD;AAClE,WAAO,MAAM,wBAAMvB,QAAN,EAAgB;AAC3BwB,MAAAA,MAAM,EAAE,MADmB;AAE3BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEL,QAAAA,KAAF;AAASC,QAAAA,SAAT;AAAoBF,QAAAA;AAApB,OAAf,CAFqB;AAG3BO,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,YAAIX,YAAY,IAAI;AAAE,wBAAcA;AAAhB,SAApB,CAFO;AAGP,YAAIR,KAAK,IAAI;AAAEoB,UAAAA,aAAa,EAAG,UAASpB,KAAM;AAAjC,SAAb;AAHO;AAHkB,KAAhB,EASVqB,IATU,CASJC,QAAD,IAAc;AAClB,UAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,eAAOhB,QAAQ,CAACiB,KAAT,CACJ,yDADI,EAEL,IAAIC,KAAJ,CAAUH,QAAQ,CAACI,UAAnB,CAFK,CAAP;AAID;;AAED,aAAOJ,QAAQ,CAACK,IAAT,EAAP;AACD,KAlBU,EAmBVN,IAnBU,CAmBJC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACM,MAAb,EAAqB;AACnB,eAAOrB,QAAQ,CAACiB,KAAT,CACJ,yDADI,EAEL,IAAIC,KAAJ,CAAUH,QAAQ,CAACM,MAAnB,CAFK,CAAP;AAID;;AAED,aAAON,QAAP;AACD,KA5BU,EA6BVO,KA7BU,CA6BHC,KAAD,IAAW;AAChB,aAAOvB,QAAQ,CAACiB,KAAT,CACJ,yDADI,EAEL,IAAIC,KAAJ,CAAUK,KAAV,CAFK,CAAP;AAID,KAlCU,CAAb;AAmCD,GApCD;;AAqCA,SAAOnB,OAAP;AACD;;AAOD,eAAeoB,cAAf,CACE1B,SADF,EAEEC,aAFF,EAG+B;AAC7B,QAAM;AAAEX,IAAAA,OAAF;AAAWI,IAAAA;AAAX,MAAsBO,aAA5B;AACA,QAAMK,OAAO,GAAGP,cAAc,CAACC,SAAD,EAAYC,aAAZ,CAA9B;AACA,QAAM0B,MAAM,GAAG,MAAM,4CAAWrB,OAAX,CAArB;AAEA,QAAMsB,aAAa,GAAGD,MAAM,CAACE,OAAP,CAAe,MAAf,CAAtB;AACA,QAAMrB,KAAK,GAAGmB,MAAM,CAACE,OAAP,CAAe,OAAf,CAAd;AACA,QAAMC,WAAW,GAAGtB,KAAK,CAACuB,SAAN,EAApB;AACA,QAAMC,aAAa,GAAGL,MAAM,CAACM,gBAAP,CAAwBL,aAAxB,CAAtB;;AAEA,QAAMM,qBAAqB,GAAIC,IAAD,IAC5BC,MAAM,CAACC,IAAP,CAAYP,WAAZ,EAAyBQ,IAAzB,CACGC,SAAD,IAAeT,WAAW,CAACS,SAAD,CAAX,CAAuBJ,IAAvB,KAAgCA,IADjD,CADF;;AAKA,QAAMK,mBAAmB,GAAIL,IAAD,IAC1BC,MAAM,CAACC,IAAP,CAAYP,WAAZ,EAAyBQ,IAAzB,CACGC,SAAD,IAAeE,MAAM,CAACX,WAAW,CAACS,SAAD,CAAX,CAAuBJ,IAAxB,CAAN,KAAyC,IAAGA,IAAI,CAACO,IAAK,KADvE,CADF;;AAKA,QAAMC,cAAc,GAAIR,IAAD,IAAUA,IAAI,CAACJ,SAAL,GAAiBa,MAAlD;;AAEA,QAAMC,eAAoC,GAAGb,aAAa,CAACc,GAAd,CAAmBX,IAAD,KAAW;AACxEY,IAAAA,cAAc,EAAEZ,IAAI,CAACO,IADmD;AAExEM,IAAAA,OAAO,EAAE,CACP,GAAG1D,OAAO,CAACwD,GAAR,CAAaF,MAAD,IACblD,MAAM,CAACoD,GAAP,CACGG,KAAD,IAAY;AACtB,uBAAuBT,mBAAmB,CAC9BL,IAD8B,CAE9B,IAAGS,MAAO,IAAGK,KAAM,MAAKT,mBAAmB,CAACL,IAAD,CAAO,mBAClDQ,cAAc,CAACR,IAAD,CAAd,GAAwB,aAAYS,MAAO,GAA3C,GAAgD,EACjD,2BAA0BK,KAAM;AAC3C,oBAAoBd,IAAI,CAACO,IAAK;AAC9B;AACA,YATQ,CADC,CADI,EAcN,cAAaR,qBAAqB,CAACC,IAAD,CAAO,KAAID,qBAAqB,CACjEC,IADiE,CAEjE,mBAAkBQ,cAAc,CAACR,IAAD,CAAd,GAAwB,mBAAxB,GAA6C,EAAG;AAC1E,cAAcA,IAAI,CAACO,IAAK;AACxB;AACA;AACA,kBAAkBP,IAAI,CAACO,IAAK,UAASP,IAAI,CAACO,IAAK;AAC/C;AACA;AACA,UAAUC,cAAc,CAACR,IAAD,CAAd,GAAwB,QAAxB,GAAkC,EAAG;AAC/C;AACA,QAzBa,EA0BPe,IA1BO,CA0BF,IA1BE,CAF+D;AA6BxEC,IAAAA,kBAAkB,EAAE,CAAC;AAAEC,MAAAA,EAAF;AAAMR,MAAAA,MAAN;AAAcK,MAAAA;AAAd,KAAD,MAA4B;AAC9CI,MAAAA,KAAK,EAAE;AAAED,QAAAA;AAAF,OADuC;AAE9C9D,MAAAA,OAAO,EAAE,CAACsD,MAAD,CAFqC;AAG9CK,MAAAA;AAH8C,KAA5B;AA7BoD,GAAX,CAAlB,CAA7C;AAoCA,SAAO;AAAEtB,IAAAA,MAAF;AAAUkB,IAAAA;AAAV,GAAP;AACD;;AAED,eAAeS,oBAAf,CACEtD,SADF,EAEEC,aAFF,EAG4B;AAC1B,QAAM;AAAEZ,IAAAA,aAAF;AAAiBK,IAAAA,MAAjB;AAAyBE,IAAAA;AAAzB,MAAwCK,aAA9C;AACA,QAAM;AAAEsD,IAAAA,KAAF;AAASrD,IAAAA;AAAT,MAAsBF,SAA5B;AACA,QAAMG,YAAY,GAAGT,MAAM,IAAIA,MAAM,CAACU,MAAP,KAAkB,CAA5B,IAAiCV,MAAM,CAAC,CAAD,CAA5D;;AACA,MAAIS,YAAJ,EAAkB;AAChBD,IAAAA,QAAQ,CAACG,IAAT,CAAe,iCAAgCF,YAAa,EAA5D;AACD,GAFD,MAEO;AACLD,IAAAA,QAAQ,CAACG,IAAT,CAAe,+BAAf;AACD;;AAED,QAAMC,OAAO,GAAGP,cAAc,CAACC,SAAD,EAAYC,aAAZ,CAA9B;AACA,QAAM;AAAE0B,IAAAA,MAAF;AAAUkB,IAAAA;AAAV,MAA+B,MAAMU,KAAK,CAACC,GAAN,CACzCjF,oBADyC,CAA3C;AAIA,QAAMkF,YAAY,GAAI,GAAEC,OAAO,CAACC,GAAR,EAAc,IAAGtE,aAAc,EAAvD;AAEA,MAAI,CAACuE,YAAGC,UAAH,CAAcJ,YAAd,CAAL,EAAkCG,YAAGE,SAAH,CAAaL,YAAb;;AAElC,QAAMM,uBAAuB,GAAIC,KAAD,IAAW;AACzC,QAAI,CAAC,WAAD,EAAc,aAAd,EAA6B,WAA7B,EAA0CC,QAA1C,CAAmDD,KAAK,CAACtB,IAAzD,CAAJ,EAAoE;AAClE,aAAO;AAAEwB,QAAAA,SAAS,EAAG;AAAd,OAAP;AACD;AACF,GAJD;;AAMA,QAAMC,SAAS,GAAG,MAAM,gEAA+BV,YAA/B,EAA6C;AACnE9B,IAAAA,MADmE;AAEnEkB,IAAAA,eAFmE;AAGnEuB,IAAAA,qBAAqB,EAAE,CAACL,uBAAD;AAH4C,GAA7C,CAAxB;AAMA,QAAMM,SAAS,GAAG,oDAAmB;AACnC1C,IAAAA,MADmC;AAEnCkB,IAAAA,eAFmC;AAGnCyB,IAAAA,eAAe,EAAEH;AAHkB,GAAnB,CAAlB;AAMA,SAAO;AACLnE,IAAAA,SADK;AAEL2B,IAAAA,MAFK;AAGLrB,IAAAA,OAAO,EAAE,4DAA2BA,OAA3B,EAAoC;AAAEiE,MAAAA,WAAW,EAAE;AAAf,KAApC,CAHJ;AAILC,IAAAA,gBAAgB,EAAE5E,UAJb;AAKL6E,IAAAA,cAAc,EAAE,sDAAqB;AAAE5B,MAAAA,eAAF;AAAmBwB,MAAAA;AAAnB,KAArB;AALX,GAAP;AAOD;;AAEM,eAAeK,WAAf,CACL1E,SADK,EAELC,aAFK,EAGL;AACA,QAAM0E,MAAM,GAAG,MAAMrB,oBAAoB,CAACtD,SAAD,EAAYC,aAAZ,CAAzC;AAEA,QAAM,2DAAiC0E,MAAjC,CAAN;AAEA,QAAM,gDAAeA,MAAf,CAAN;AACD;;AAED,SAASC,cAAT,CAAwBC,GAAxB,EAAqCC,QAArC,EAAuD;AACrD,MAAI,CAACA,QAAL,EAAe;AACb,WAAOD,GAAP;AACD;;AAED,QAAME,MAAM,GAAG,IAAIC,GAAJ,CAAQH,GAAR,CAAf;;AACA,MAAIE,MAAM,CAACE,QAAP,KAAoB,oBAAxB,EAA8C;AAC5C,WAAOJ,GAAP;AACD;;AAED,QAAMK,OAAO,GAAI,WAAUH,MAAM,CAACE,QAAS,iBAAgBH,QAAS,WAAUC,MAAM,CAACI,QAAS,EAA9F;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAa,qBAAoBH,OAAQ,QAAOL,GAAI,EAApD;AACA,SAAOK,OAAP;AACD;;AASM,eAAeI,YAAf,CACL7G,IADK,EAELwB,aAFK,EAGL;AACA,QAAM;AACJsF,IAAAA,IADI;AAEJC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF,KAFL;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA,KALI;AAMJ1F,IAAAA;AANI,MAOFzB,IAPJ;AAQA,QAAM;AACJG,IAAAA,kBADI;AAEJK,IAAAA,iBAFI;AAGJD,IAAAA,mBAHI;AAIJY,IAAAA,UAJI;AAKJC,IAAAA;AALI,MAMFI,aANJ;AAQA,QAAM4F,OAAO,GACXN,IAAI,CAACxC,cAAL,KAAwB,OAAxB,IAAmCwC,IAAI,CAACO,QAAL,CAAc7B,QAAd,CAAuB,QAAvB,CADrC;;AAGA,MACEsB,IAAI,CAACxC,cAAL,KAAwB,OAAxB,KACC9D,iBAAiB,IAAKD,mBAAmB,IAAI6G,OAD9C,CADF,EAGE;AACA,QAAI;AACF,YAAME,OAAO,GAAGF,OAAO,GACnBjB,cAAc,CAACW,IAAI,CAACV,GAAN,EAAWhF,aAAX,CADK,GAEnB0F,IAAI,CAACV,GAFT;AAGA3E,MAAAA,QAAQ,CAACG,IAAT,CAAe,SAAQ0F,OAAQ,QAAOR,IAAI,CAACV,GAAI,EAA/C;;AACA,YAAMmB,GAAG,GAAGT,IAAI,CAACU,QAAL,IAAiBC,cAAKC,OAAL,CAAaZ,IAAI,CAACU,QAAlB,CAA7B;;AACA,YAAMvD,IAAI,GAAG6C,IAAI,CAACU,QAAL,IAAiBC,cAAKE,QAAL,CAAcb,IAAI,CAACU,QAAnB,EAA6BD,GAA7B,CAA9B;;AACA,YAAMK,QAAQ,GAAG,MAAM,kDAAqB;AAC1CxB,QAAAA,GAAG,EAAEkB,OADqC;AAE1CO,QAAAA,YAAY,EAAEf,IAAI,CAACnC,EAFuB;AAG1CqC,QAAAA,UAH0C;AAI1CC,QAAAA,YAJ0C;AAK1CC,QAAAA,QAL0C;AAM1CpC,QAAAA,KAAK,EAAEgD,SANmC;AAO1CX,QAAAA,KAP0C;AAQ1C1F,QAAAA,QAR0C;AAS1CwC,QAAAA,IAT0C;AAU1CsD,QAAAA;AAV0C,OAArB,CAAvB;AAaA,UAAIK,QAAJ,EAAcd,IAAI,CAACiB,SAAL,GAAiBH,QAAQ,CAACjD,EAA1B;AACf,KArBD,CAqBE,OAAOqD,CAAP,EAAU;AACVrB,MAAAA,OAAO,CAAC3D,KAAR,CAAc,yBAAd,EAAyCgF,CAAzC;AACD;AACF;;AAED,MAAI7H,kBAAJ,EAAwB;AACtB,UAAM8H,MAAM,GAAGtE,MAAM,CAACuE,OAAP,CAAepB,IAAf,EACZzC,GADY,CACR,CAAC,CAAC8D,GAAD,EAAMC,KAAN,CAAD,MAAmB;AAAED,MAAAA,GAAF;AAAOC,MAAAA;AAAP,KAAnB,CADQ,EAEZC,MAFY,CAGX,CAAC;AAAED,MAAAA;AAAF,KAAD,KAAeA,KAAK,IAAI,CAACA,KAAD,aAACA,KAAD,uBAACA,KAAD,CAAgB9D,cAAhB,MAAmC,UAHhD,CAAf;;AAMA,QAAI2D,MAAM,CAACtG,MAAX,EAAmB;AACjBsG,MAAAA,MAAM,CAACK,OAAP,CAAgB/C,KAAD,IAAW;AACxB,cAAMgD,eAAuB,GAAG,gBAAQhD,KAAK,CAAC6C,KAAP,CAAqBI,QAA5B,CAAhC;AAEA,cAAMC,YAAY,GAAG;AACnB9D,UAAAA,EAAE,EAAG,gBAAesC,YAAY,CAAE,GAAEH,IAAI,CAACnC,EAAG,IAAGY,KAAK,CAAC4C,GAAI,EAAzB,CAA4B,EADzC;AAEnBO,UAAAA,MAAM,EAAE5B,IAAI,CAACnC,EAFM;AAGnBgE,UAAAA,QAAQ,EAAE;AACRjF,YAAAA,IAAI,EAAG,GAAEvC,UAAW,cADZ;AAERyH,YAAAA,SAAS,EAAE,eAFH;AAGRC,YAAAA,OAAO,EAAEN,eAHD;AAIRO,YAAAA,aAAa,EAAEC,gBACZC,UADY,CACA,KADA,EAEZC,MAFY,CAELV,eAFK,EAGZW,MAHY,CAGJ,KAHI;AAJP;AAHS,SAArB;AAcAlC,QAAAA,UAAU,CAACyB,YAAD,CAAV;AAEClD,QAAAA,KAAK,CAAC6C,KAAP,CAAqBK,YAArB,GAAoCA,YAAY,CAAC9D,EAAjD;AACD,OApBD;AAqBD;AACF;AACF;;AAEM,eAAewE,yBAAf,CACL5H,SADK,EAELC,aAFK,EAGL;AACA,QAAM;AACJrB,IAAAA,kBADI;AAEJK,IAAAA,iBAFI;AAGJD,IAAAA,mBAHI;AAIJY,IAAAA;AAJI,MAKFK,aALJ;AAMA,QAAM;AACJuF,IAAAA,OAAO,EAAE;AAAEqC,MAAAA;AAAF,KADL;AAEJtE,IAAAA;AAFI,MAGFvD,SAHJ;AAKA,QAAM8H,YAAY,GAAG,MAAMpG,cAAc,CAAC1B,SAAD,EAAYC,aAAZ,CAAzC;AACA,QAAMsD,KAAK,CAACwE,GAAN,CAAUxJ,oBAAV,EAAgCuJ,YAAhC,CAAN;AACA,QAAM;AAAEjF,IAAAA;AAAF,MAAsBiF,YAA5B;AAEAjF,EAAAA,eAAe,CAACkE,OAAhB,CAAyBiB,cAAD,IAAoB;AAC1CH,IAAAA,WAAW,CAAE,QAAOjI,UAAW,GAAEoI,cAAc,CAACjF,cAAe;AACnE;AACA;AACA;AACA,MAJe,CAAX;AAKD,GAND;AAQA,MAAI/D,mBAAmB,IAAIC,iBAA3B,EACE4I,WAAW,CAAE;AACjB,aAAajI,UAAW;AACxB;AACA;AACA,KAJe,CAAX;AAMF,MAAIhB,kBAAJ,EACEiJ,WAAW,CAAE;AACjB,aAAajI,UAAW;AACxB;AACA;AACA,aAAaA,UAAW;AACxB,wBAAwBA,UAAW;AACnC;AACA,KAPe,CAAX;AAQH","sourcesContent":["import crypto from \"crypto\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport {\r\n  wrapQueryExecutorWithQueue,\r\n  loadSchema,\r\n  readOrGenerateDefaultFragments,\r\n  compileNodeQueries,\r\n  buildNodeDefinitions,\r\n  createSchemaCustomization as createToolkitSchemaCustomization,\r\n  sourceAllNodes,\r\n} from \"gatsby-graphql-source-toolkit\";\r\nimport { createRemoteFileNode } from \"gatsby-source-filesystem\";\r\nimport { decode } from \"he\";\r\nimport fetch from \"node-fetch\";\r\nimport { ObjectSchema } from \"gatsby-plugin-utils\";\r\nimport {\r\n  CreateNodeArgs,\r\n  CreateSchemaCustomizationArgs,\r\n  Node,\r\n  NodePluginArgs,\r\n  ParentSpanPluginArgs,\r\n  PluginOptions,\r\n  PluginOptionsSchemaArgs,\r\n  SourceNodesArgs,\r\n} from \"gatsby\";\r\nimport {\r\n  GraphQLAbstractType,\r\n  GraphQLInterfaceType,\r\n  GraphQLSchema,\r\n} from \"graphql\";\r\nimport {\r\n  IGatsbyNodeConfig,\r\n  IGatsbyNodeDefinition,\r\n  IQueryExecutor,\r\n  ISourcingConfig,\r\n  RemoteTypeName,\r\n} from \"gatsby-graphql-source-toolkit/dist/types\";\r\n\r\nconst SchemaConfigCacheKey = \"CachedInformation\";\r\n\r\nexport function pluginOptionsSchema(\r\n  args: PluginOptionsSchemaArgs\r\n): ObjectSchema {\r\n  const { Joi } = args;\r\n  return Joi.object({\r\n    buildMarkdownNodes: Joi.boolean()\r\n      .description(\r\n        `Build markdown nodes for all [RichText](https://graphcms.com/docs/reference/fields/rich-text) fields in your GraphCMS schema`\r\n      )\r\n      .default(false),\r\n    downloadLocalImages: Joi.boolean()\r\n      .description(\r\n        `Download and cache GraphCMS image assets in your Gatsby project`\r\n      )\r\n      .default(false),\r\n    downloadAllAssets: Joi.boolean()\r\n      .description(\r\n        `Download and cache all GraphCMS assets in your Gatsby project`\r\n      )\r\n      .default(false),\r\n    endpoint: Joi.string()\r\n      .description(\r\n        `The endpoint URL for the GraphCMS project. This can be found in the [project settings UI](https://graphcms.com/docs/guides/concepts/apis#working-with-apis)`\r\n      )\r\n      .required(),\r\n    fragmentsPath: Joi.string()\r\n      .description(\r\n        `The local project path where generated query fragments are saved. This is relative to your current working directory. If using multiple instances of the source plugin, you **must** provide a value here to prevent type and/or fragment conflicts.`\r\n      )\r\n      .default(`graphcms-fragments`),\r\n    locales: Joi.array()\r\n      .description(\r\n        `An array of locale key strings from your GraphCMS project. You can read more about working with localisation in GraphCMS [here](https://graphcms.com/docs/guides/concepts/i18n).`\r\n      )\r\n      .items(Joi.string())\r\n      .min(1)\r\n      .default([\"en\"]),\r\n    stages: Joi.array()\r\n      .description(\r\n        `An array of Content Stages from your GraphCMS project. You can read more about using Content Stages [here](https://graphcms.com/guides/working-with-content-stages).`\r\n      )\r\n      .items(Joi.string())\r\n      .min(1)\r\n      .default([\"PUBLISHED\"]),\r\n    token: Joi.string().description(\r\n      `If your GraphCMS project is **not** publicly accessible, you will need to provide a [Permanent Auth Token](https://graphcms.com/docs/reference/authorization) to correctly authorize with the API. You can learn more about creating and managing API tokens [here](https://graphcms.com/docs/guides/concepts/apis#working-with-apis)`\r\n    ),\r\n    typePrefix: Joi.string()\r\n      .description(\r\n        `The string by which every generated type name is prefixed with. For example, a type of Post in GraphCMS would become GraphCMS_Post by default. If using multiple instances of the source plugin, you **must** provide a value here to prevent type conflicts`\r\n      )\r\n      .default(`GraphCMS_`),\r\n    maxImageWidth: Joi.number()\r\n      .description(\"Maximum width of images to download\")\r\n      .default(0),\r\n  });\r\n}\r\n\r\ninterface RealPluginOptions extends PluginOptions {\r\n  buildMarkdownNodes: boolean;\r\n  downloadLocalImages: boolean;\r\n  downloadAllAssets: boolean;\r\n  endpoint: string;\r\n  fragmentsPath: string;\r\n  stages: string[];\r\n  token: string;\r\n  typePrefix: string;\r\n  locales: string[];\r\n  maxImageWidth: number;\r\n}\r\n\r\nfunction createExecutor(\r\n  gatsbyApi: NodePluginArgs,\r\n  pluginOptions: RealPluginOptions\r\n): IQueryExecutor {\r\n  const { endpoint, fragmentsPath, locales, stages, token, typePrefix } =\r\n    pluginOptions;\r\n  const { reporter } = gatsbyApi;\r\n  const defaultStage = stages && stages.length === 1 && stages[0];\r\n  if (defaultStage) {\r\n    reporter.info(`using default GraphCMS stage: ${defaultStage}`);\r\n  } else {\r\n    reporter.info(`no default stage for GraphCMS`);\r\n  }\r\n  const execute = async ({ operationName, query, variables = {} }) => {\r\n    return await fetch(endpoint, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ query, variables, operationName }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        ...(defaultStage && { \"gcms-stage\": defaultStage }),\r\n        ...(token && { Authorization: `Bearer ${token}` }),\r\n      },\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          return reporter.panic(\r\n            `gatsby-source-graphcms: Problem building GraphCMS nodes`,\r\n            new Error(response.statusText)\r\n          );\r\n        }\r\n\r\n        return response.json();\r\n      })\r\n      .then((response) => {\r\n        if (response.errors) {\r\n          return reporter.panic(\r\n            `gatsby-source-graphcms: Problem building GraphCMS nodes`,\r\n            new Error(response.errors)\r\n          );\r\n        }\r\n\r\n        return response;\r\n      })\r\n      .catch((error) => {\r\n        return reporter.panic(\r\n          `gatsby-source-graphcms: Problem building GraphCMS nodes`,\r\n          new Error(error)\r\n        );\r\n      });\r\n  };\r\n  return execute;\r\n}\r\n\r\ninterface ISchemaInformation {\r\n  schema: GraphQLSchema;\r\n  gatsbyNodeTypes: IGatsbyNodeConfig[];\r\n}\r\n\r\nasync function retrieveSchema(\r\n  gatsbyApi: NodePluginArgs,\r\n  pluginOptions: RealPluginOptions\r\n): Promise<ISchemaInformation> {\r\n  const { locales, stages } = pluginOptions;\r\n  const execute = createExecutor(gatsbyApi, pluginOptions);\r\n  const schema = await loadSchema(execute);\r\n\r\n  const nodeInterface = schema.getType(\"Node\") as GraphQLAbstractType;\r\n  const query = schema.getType(\"Query\") as GraphQLInterfaceType;\r\n  const queryFields = query.getFields();\r\n  const possibleTypes = schema.getPossibleTypes(nodeInterface);\r\n\r\n  const singularRootFieldName = (type) =>\r\n    Object.keys(queryFields).find(\r\n      (fieldName) => queryFields[fieldName].type === type\r\n    );\r\n\r\n  const pluralRootFieldName = (type) =>\r\n    Object.keys(queryFields).find(\r\n      (fieldName) => String(queryFields[fieldName].type) === `[${type.name}!]!`\r\n    );\r\n\r\n  const hasLocaleField = (type) => type.getFields().locale;\r\n\r\n  const gatsbyNodeTypes: IGatsbyNodeConfig[] = possibleTypes.map((type) => ({\r\n    remoteTypeName: type.name,\r\n    queries: [\r\n      ...locales.map((locale) =>\r\n        stages.map(\r\n          (stage) => `\r\n          query LIST_${pluralRootFieldName(\r\n            type\r\n          )}_${locale}_${stage} { ${pluralRootFieldName(type)}(first: $limit, ${\r\n            hasLocaleField(type) ? `locales: [${locale}]` : \"\"\r\n          }, skip: $offset, stage: ${stage}) {\r\n              ..._${type.name}Id_\r\n            }\r\n          }`\r\n        )\r\n      ),\r\n      `query NODE_${singularRootFieldName(type)}{ ${singularRootFieldName(\r\n        type\r\n      )}(where: $where, ${hasLocaleField(type) ? `locales: $locales` : \"\"}) {\r\n        ..._${type.name}Id_\r\n        }\r\n      }\r\n      fragment _${type.name}Id_ on ${type.name} {\r\n        __typename\r\n        id\r\n        ${hasLocaleField(type) ? `locale` : \"\"}\r\n        stage\r\n      }`,\r\n    ].join(\"\\n\"),\r\n    nodeQueryVariables: ({ id, locale, stage }) => ({\r\n      where: { id },\r\n      locales: [locale],\r\n      stage,\r\n    }),\r\n  }));\r\n\r\n  return { schema, gatsbyNodeTypes };\r\n}\r\n\r\nasync function createSourcingConfig(\r\n  gatsbyApi: ParentSpanPluginArgs,\r\n  pluginOptions: RealPluginOptions\r\n): Promise<ISourcingConfig> {\r\n  const { fragmentsPath, stages, typePrefix } = pluginOptions;\r\n  const { cache, reporter } = gatsbyApi;\r\n  const defaultStage = stages && stages.length === 1 && stages[0];\r\n  if (defaultStage) {\r\n    reporter.info(`using default GraphCMS stage: ${defaultStage}`);\r\n  } else {\r\n    reporter.info(`no default stage for GraphCMS`);\r\n  }\r\n\r\n  const execute = createExecutor(gatsbyApi, pluginOptions);\r\n  const { schema, gatsbyNodeTypes } = (await cache.get(\r\n    SchemaConfigCacheKey\r\n  )) as ISchemaInformation;\r\n\r\n  const fragmentsDir = `${process.cwd()}/${fragmentsPath}`;\r\n\r\n  if (!fs.existsSync(fragmentsDir)) fs.mkdirSync(fragmentsDir);\r\n\r\n  const addSystemFieldArguments = (field) => {\r\n    if ([\"createdAt\", \"publishedAt\", \"updatedAt\"].includes(field.name)) {\r\n      return { variation: `COMBINED` };\r\n    }\r\n  };\r\n\r\n  const fragments = await readOrGenerateDefaultFragments(fragmentsDir, {\r\n    schema,\r\n    gatsbyNodeTypes,\r\n    defaultArgumentValues: [addSystemFieldArguments],\r\n  });\r\n\r\n  const documents = compileNodeQueries({\r\n    schema,\r\n    gatsbyNodeTypes,\r\n    customFragments: fragments,\r\n  });\r\n\r\n  return {\r\n    gatsbyApi,\r\n    schema,\r\n    execute: wrapQueryExecutorWithQueue(execute, { concurrency: 10 }),\r\n    gatsbyTypePrefix: typePrefix,\r\n    gatsbyNodeDefs: buildNodeDefinitions({ gatsbyNodeTypes, documents }),\r\n  };\r\n}\r\n\r\nexport async function sourceNodes(\r\n  gatsbyApi: SourceNodesArgs,\r\n  pluginOptions: RealPluginOptions\r\n) {\r\n  const config = await createSourcingConfig(gatsbyApi, pluginOptions);\r\n\r\n  await createToolkitSchemaCustomization(config);\r\n\r\n  await sourceAllNodes(config);\r\n}\r\n\r\nfunction createImageUrl(url: string, maxWidth: number) {\r\n  if (!maxWidth) {\r\n    return url;\r\n  }\r\n\r\n  const parsed = new URL(url);\r\n  if (parsed.hostname !== \"media.graphcms.com\") {\r\n    return url;\r\n  }\r\n\r\n  const resized = `https://${parsed.hostname}/resize=width:${maxWidth},fit:max${parsed.pathname}`;\r\n  console.log(`Using resize url: ${resized} for ${url}`);\r\n  return resized;\r\n}\r\n\r\ntype GraphCMS_Node = Node & {\r\n  mimeType: string;\r\n  url: string;\r\n  fileName: string;\r\n  remoteTypeName?: string;\r\n  markdown?: string;\r\n};\r\nexport async function onCreateNode(\r\n  args: CreateNodeArgs<GraphCMS_Node>,\r\n  pluginOptions: RealPluginOptions\r\n) {\r\n  const {\r\n    node,\r\n    actions: { createNode },\r\n    createNodeId,\r\n    getCache,\r\n    store,\r\n    reporter,\r\n  } = args;\r\n  const {\r\n    buildMarkdownNodes,\r\n    downloadAllAssets,\r\n    downloadLocalImages,\r\n    typePrefix,\r\n    maxImageWidth,\r\n  } = pluginOptions;\r\n\r\n  const isImage =\r\n    node.remoteTypeName === \"Asset\" && node.mimeType.includes(\"image/\");\r\n\r\n  if (\r\n    node.remoteTypeName === \"Asset\" &&\r\n    (downloadAllAssets || (downloadLocalImages && isImage))\r\n  ) {\r\n    try {\r\n      const realUrl = isImage\r\n        ? createImageUrl(node.url, maxImageWidth)\r\n        : node.url;\r\n      reporter.info(`Using ${realUrl} for ${node.url}`);\r\n      const ext = node.fileName && path.extname(node.fileName);\r\n      const name = node.fileName && path.basename(node.fileName, ext);\r\n      const fileNode = await createRemoteFileNode({\r\n        url: realUrl,\r\n        parentNodeId: node.id,\r\n        createNode,\r\n        createNodeId,\r\n        getCache,\r\n        cache: undefined,\r\n        store,\r\n        reporter,\r\n        name,\r\n        ext,\r\n      } as any);\r\n\r\n      if (fileNode) node.localFile = fileNode.id;\r\n    } catch (e) {\r\n      console.error(\"gatsby-source-graphcms:\", e);\r\n    }\r\n  }\r\n\r\n  if (buildMarkdownNodes) {\r\n    const fields = Object.entries(node)\r\n      .map(([key, value]) => ({ key, value }))\r\n      .filter(\r\n        ({ value }) => value && (value as any)?.remoteTypeName === \"RichText\"\r\n      );\r\n\r\n    if (fields.length) {\r\n      fields.forEach((field) => {\r\n        const decodedMarkdown: string = decode((field.value as any).markdown);\r\n\r\n        const markdownNode = {\r\n          id: `MarkdownNode:${createNodeId(`${node.id}-${field.key}`)}`,\r\n          parent: node.id,\r\n          internal: {\r\n            type: `${typePrefix}MarkdownNode`,\r\n            mediaType: \"text/markdown\",\r\n            content: decodedMarkdown,\r\n            contentDigest: crypto\r\n              .createHash(`md5`)\r\n              .update(decodedMarkdown)\r\n              .digest(`hex`),\r\n          },\r\n        };\r\n\r\n        createNode(markdownNode);\r\n\r\n        (field.value as any).markdownNode = markdownNode.id;\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport async function createSchemaCustomization(\r\n  gatsbyApi: CreateSchemaCustomizationArgs,\r\n  pluginOptions: RealPluginOptions\r\n) {\r\n  const {\r\n    buildMarkdownNodes,\r\n    downloadAllAssets,\r\n    downloadLocalImages,\r\n    typePrefix,\r\n  } = pluginOptions;\r\n  const {\r\n    actions: { createTypes },\r\n    cache,\r\n  } = gatsbyApi;\r\n\r\n  const schemaConfig = await retrieveSchema(gatsbyApi, pluginOptions);\r\n  await cache.set(SchemaConfigCacheKey, schemaConfig);\r\n  const { gatsbyNodeTypes } = schemaConfig;\r\n\r\n  gatsbyNodeTypes.forEach((gatsbyNodeType) => {\r\n    createTypes(`type ${typePrefix}${gatsbyNodeType.remoteTypeName} implements Node {\r\n      updatedAt: Date! @dateformat\r\n      createdAt: Date! @dateformat\r\n      publishedAt: Date @dateformat\r\n    }`);\r\n  });\r\n\r\n  if (downloadLocalImages || downloadAllAssets)\r\n    createTypes(`\r\n      type ${typePrefix}Asset {\r\n        localFile: File @link\r\n      }\r\n    `);\r\n\r\n  if (buildMarkdownNodes)\r\n    createTypes(`\r\n      type ${typePrefix}MarkdownNode implements Node {\r\n        id: ID!\r\n      }\r\n      type ${typePrefix}RichText {\r\n        markdownNode: ${typePrefix}MarkdownNode @link\r\n      }\r\n    `);\r\n}\r\n"],"file":"gatsby-node.js"}